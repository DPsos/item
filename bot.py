from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
import sqlite3
from PIL import Image, ImageDraw
import requests
import asyncio
from flask import Flask, render_template
import re
import threading
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
from datetime import datetime
import secrets
import base64
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = '7565784723:AAHyDRF6C-ExQ10Mrf4QxOh2_EuJAWwL9dE'
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('space_world.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER UNIQUE,
    wallet_address TEXT,
    username TEXT,
    created_at TEXT,
    payment_comment TEXT UNIQUE  -- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS planets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    planet_data TEXT,
    created_at TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')
conn.commit()

# –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã (0.01 TON)
PLANET_PRICE_TON = 0.01 * 1e9  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞–Ω–æTON

# –í–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
YOUR_WALLET_ADDRESS = "UQDCwmyuPjSJg8XmIHbEo1d2gLoRXq0iYyEshPGosPF_6JG1"

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ TON
def validate_wallet_address(address):
    return re.match(r"^[a-zA-Z0-9_-]{48}$", address) is not None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def generate_unique_comment():
    return secrets.token_hex(8)

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
def generate_payment_link(payment_comment):
    amount = PLANET_PRICE_TON  # 0.01 TON –≤ –Ω–∞–Ω–æTON
    url = f"https://pay.ton.org/?amount={amount}&to={YOUR_WALLET_ADDRESS}&text={payment_comment}"
    return url

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–∏—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create_planet, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –ø–ª–∞–Ω–µ—Ç—É.")

# –ö–æ–º–∞–Ω–¥–∞ /create_planet
@dp.message_handler(commands=['create_planet'])
async def create_planet(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if user:
        await message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /draw_planet, —á—Ç–æ–±—ã –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø–ª–∞–Ω–µ—Ç—É.")
    else:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        payment_comment = generate_unique_comment()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        payment_link = generate_payment_link(payment_comment)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        await message.reply(
            f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ {PLANET_PRICE_TON / 1e9} TON:\n\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å]({payment_link})\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ TON:",
            parse_mode="Markdown"
        )
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        @dp.message_handler(lambda msg: msg.from_user.id == user_id and not msg.text.startswith('/'))
        async def process_wallet(message: types.Message):
            wallet_address = message.text.strip()
            try:
                if validate_wallet_address(wallet_address):
                    username = message.from_user.username or "Anonymous"
                    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    cursor.execute(
                        "INSERT INTO users (user_id, wallet_address, username, created_at, payment_comment) VALUES (?, ?, ?, ?, ?)",
                        (user_id, wallet_address, username, created_at, payment_comment)
                    )
                    conn.commit()
                    await message.reply(f"–ö–æ—à–µ–ª–µ–∫ {wallet_address} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /draw_planet –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã.")
                else:
                    await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å TON.")
            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
async def check_payment(user_id):
    cursor.execute("SELECT wallet_address, payment_comment FROM users WHERE user_id = ?", (user_id,))
    user_data = cursor.fetchone()
    if not user_data:
        return False
    user_wallet, payment_comment = user_data
    
    url = f"https://toncenter.com/api/v2/getTransactions?address={YOUR_WALLET_ADDRESS}&limit=10"
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {url}")
        response = requests.get(url)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.status_code}, {response.text}")
        if response.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {response.status_code}, Response: {response.text}")
            return False
        
        transactions = response.json().get('result', [])
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transactions}")
        
        for tx in transactions:
            if tx['in_msg']:
                msg = tx['in_msg']
                if msg['source'] == user_wallet and int(msg['value']) >= PLANET_PRICE_TON:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    comment = None
                    if 'msg_data' in msg:
                        if msg['msg_data']['@type'] == 'msg.dataText':
                            comment = msg['msg_data'].get('text', '')
                        elif msg['msg_data']['@type'] == 'msg.dataRaw':
                            body = msg['msg_data'].get('body', '')
                            try:
                                decoded_body = bytes.fromhex(body).decode('utf-8').strip('\x00')
                                comment = base64.b64decode(decoded_body).decode('utf-8')
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    
                    if comment and comment == payment_comment:
                        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: source={msg['source']}, value={msg['value']}, comment={comment}")
                        return True
                    else:
                        logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: expected={payment_comment}, got={comment}")
        logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞: {user_wallet}")
        return False
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø–ª–∞–Ω–µ—Ç—ã
def create_planet_editor(user_id):
    img = Image.new('RGB', (32, 32), color='black')
    draw = ImageDraw.Draw(img)
    draw.ellipse((8, 8, 24, 24), fill='blue')
    img_path = f'static/planets/editor_{user_id}.png'
    img.save(img_path)
    return img_path

# –ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
def get_color_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton("üü• –ö—Ä–∞—Å–Ω—ã–π", callback_data="color_red"),
        InlineKeyboardButton("üü© –ó–µ–ª–µ–Ω—ã–π", callback_data="color_green"),
        InlineKeyboardButton("üü¶ –°–∏–Ω–∏–π", callback_data="color_blue"),
    ]
    keyboard.add(*buttons)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /draw_planet
@dp.message_handler(commands=['draw_planet'])
async def draw_planet(message: types.Message):
    user_id = message.from_user.id
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    await asyncio.sleep(10)  # –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    
    if await check_payment(user_id):
        editor_path = create_planet_editor(user_id)
        with open(editor_path, 'rb') as photo:
            await message.reply_photo(photo, caption="–†–µ–¥–∞–∫—Ç–æ—Ä –ø–ª–∞–Ω–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pixel X Y COLOR –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª–µ–π.")
        
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=get_color_keyboard())
    else:
        await message.reply("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0.01 TON —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
@dp.callback_query_handler(lambda query: query.data.startswith("color_"))
async def process_color(query: types.CallbackQuery):
    color = query.data.split("_")[1]
    await query.message.reply(f"–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç: {color}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pixel X Y –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è.")

# –ö–æ–º–∞–Ω–¥–∞ /pixel –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∏–∫—Å–µ–ª—è
@dp.message_handler(commands=['pixel'])
async def set_pixel(message: types.Message):
    user_id = message.from_user.id
    try:
        args = message.get_args().split()
        x, y = int(args[0]), int(args[1])
        color = args[2] if len(args) > 2 else "red"
        editor_path = f'static/planets/editor_{user_id}.png'
        editor_image = Image.open(editor_path).convert("RGBA")
        draw = ImageDraw.Draw(editor_image)
        if color == "red":
            draw.point((x, y), fill=(255, 0, 0, 255))
        elif color == "green":
            draw.point((x, y), fill=(0, 255, 0, 255))
        elif color == "blue":
            draw.point((x, y), fill=(0, 0, 255, 255))
        editor_image.save(editor_path)
        with open(editor_path, 'rb') as photo:
            await message.reply_photo(photo, caption=f"–ü–∏–∫—Å–µ–ª—å ({x}, {y}) –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {color}.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∏–∫—Å–µ–ª—è: {e}")
        await message.reply(f"–û—à–∏–±–∫–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /pixel X Y COLOR.")

# –ö–æ–º–∞–Ω–¥–∞ /save_planet –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã
@dp.message_handler(commands=['save_planet'])
async def save_planet(message: types.Message):
    user_id = message.from_user.id
    editor_path = f'static/planets/editor_{user_id}.png'
    planet_path = f'static/planets/planet_{user_id}.png'
    Image.open(editor_path).save(planet_path)
    created_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO planets (user_id, planet_data, created_at) VALUES (?, ?, ?)", (user_id, planet_path, created_at))
    conn.commit()
    await message.reply("–í–∞—à–∞ –ø–ª–∞–Ω–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –≤—ã–ø—É—â–µ–Ω–∞ –≤ –∫–æ—Å–º–æ—Å!")

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–∏—Ä–∞
@app.route('/')
def show_space():
    cursor.execute("SELECT planets.*, users.username FROM planets JOIN users ON planets.user_id = users.user_id")
    planets = cursor.fetchall()
    return render_template('index.html', planets=planets)

# –ó–∞–ø—É—Å–∫ Flask
def run_flask():
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 80)))

if __name__ == '__main__':
    webhook_url = os.getenv('WEBHOOK_URL', 'https://plannet.space/webhook')
    webhook_path = '/webhook'

    async def on_startup(dispatcher):
        await bot.set_webhook(webhook_url + webhook_path)

    async def on_shutdown(dispatcher):
        await bot.delete_webhook()

    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º
    executor.start_webhook(
        dispatcher=dp,
        webhook_path=webhook_path,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host='0.0.0.0',
        port=int(os.environ.get('PORT', 80))
    )